/**
 * crash.ts ‚Äì funtion/s to report a bug on GitHub.
 */

import { app, shell } from "electron";
import { appInfo } from "../main/modules/client";

/**
 * Generates a link to new GitHub issue, based on `bug_report.md`
 * and current hardware / software configuration. This makes it
 * easy to aquire needed details (except screenshot, because of
 * the lack of the GitHub support to do that via the CDN or using
 * 'base64' images).
 * 
 * @property reason ‚Äì A bug description (app failure reason).
 * @todo Parse (commented) values to be compatible with the template.
 */
export async function createGithubIssue(reason?: string): Promise<void> {

    const description = reason ?? '';

    /** User-friendly platform value, which has an emoji closest to its logo. */
    /*let platform: string = process.platform.charAt(0).toUpperCase() + process.platform.slice(1);
    switch (process.platform) {
        case "win32":
            platform = "ü™üÔ∏è " + platform;
            break;
        case "darwin":
            platform = "üçéÔ∏è " + platform;
            break;
        case "linux":
            platform = "üêßÔ∏è " + platform;
            break;
    }*/

    /** Architecture name with the user-friendly notes next to it. */
    /*let architecture: string = process.arch;
    switch (process.arch) {
        case "ia32":
            architecture = architecture + ' (32-bit Intel/AMD)';
            break;
        case "x64":
            architecture = architecture + ' (32-bit Intel/AMD)';
            break;
        case "armv7l":
            architecture = architecture + ' (32-bit ARM)';
            break;
        case "arm64":
            architecture = architecture + ' (64-bit ARM)';
            break;
    }*/

    /* Generate template URL. */
    /** An URL to the new GitHub issue, based on YAML forms. */
    const githubIssueUrl = new URL(
        'https://github.com/'+appInfo.repository.name+'/issues/new'+
            '?assignees=SpacingBat3' + '&labels=bug' + '&template=bug.yml' +
            //'&platform=' + encodeURIComponent(platform) +
            //'&architecture=' + encodeURIComponent(architecture) +
            '&electron_version=' + encodeURIComponent(process.versions.electron) +
            '&app_version=' + encodeURIComponent(app.getVersion()) +
            '&additional=' + encodeURIComponent('**Notice:** This issue was automatically generated by ' + app.getName() + '.') +
            (description !== '' ? '&description=' + encodeURIComponent(description) : '')
    )

    /* Verify origin and open URL in default browser. */

    if (githubIssueUrl.origin === "https://github.com")
        shell.openExternal(githubIssueUrl.href);
}